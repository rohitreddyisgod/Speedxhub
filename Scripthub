
do local StrToNumber=tonumber;local Byte=string.byte;local Char=string.char;local Sub=string.sub;local Subg=string.gsub;local Rep=string.rep;local Concat=table.concat;local Insert=table.insert;local LDExp=math.ldexp;local GetFEnv=getfenv or function() return _ENV;end ;local Setmetatable=setmetatable;local PCall=pcall;local Select=select;local Unpack=unpack or table.unpack ;local ToNumber=tonumber;local function VMCall(ByteString,vmenv,...) local DIP=1;local repeatNext;ByteString=Subg(Sub(ByteString,5),"..",function(byte) if (Byte(byte,2)==81) then local FlatIdent_95CAC=0;while true do if (FlatIdent_95CAC==0) then repeatNext=StrToNumber(Sub(byte,1,1));return "";end end else local FlatIdent_76979=0;local a;while true do if (FlatIdent_76979==0) then a=Char(StrToNumber(byte,16));if repeatNext then local FlatIdent_69270=0;local b;while true do if (FlatIdent_69270==1) then return b;end if (FlatIdent_69270==0) then b=Rep(a,repeatNext);repeatNext=nil;FlatIdent_69270=1;end end else return a;end break;end end end end);local function gBit(Bit,Start,End) if End then local Res=(Bit/((5 -3)^(Start-((1 + 1) -1))))%(((880 -(282 + 595)) -1)^(((End-((1639 -(1523 + 114)) -1)) -(Start-(620 -(555 + 64)))) + (932 -(857 + 74)))) ;return Res-(Res%(569 -(367 + 201))) ;else local Plc=2^(Start-(928 -(214 + 713))) ;return (((Bit%(Plc + Plc))>=Plc) and (1 + 0)) or 0 ;end end local function gBits8() local a=Byte(ByteString,DIP,DIP);DIP=DIP + 1 ;return a;end local function gBits16() local a,b=Byte(ByteString,DIP,DIP + 2 + 0 );DIP=DIP + (2 -0) ;return (b * (1321 -(68 + 997))) + a ;end local function gBits32() local FlatIdent_7126A=0;local a;local b;local c;local d;while true do if (FlatIdent_7126A==(1271 -(226 + (2490 -1446)))) then return (d * 16777216) + (c * (285370 -219834)) + (b * (373 -(32 + 85))) + a ;end if (FlatIdent_7126A==(0 + 0)) then a,b,c,d=Byte(ByteString,DIP,DIP + 3 );DIP=DIP + 1 + 3 ;FlatIdent_7126A=958 -(892 + 65) ;end end end local function gFloat() local Left=gBits32();local Right=gBits32();local IsNormal=1 -0 ;local Mantissa=(gBit(Right,1 -0 ,20) * ((352 -(87 + 263))^(212 -(67 + 113)))) + Left ;local Exponent=gBit(Right,16 + (796 -(368 + 423)) ,75 -44 );local Sign=((gBit(Right,24 + 8 )==(3 -2)) and  -(953 -(802 + 150))) or 1 ;if (Exponent==(0 -0)) then if (Mantissa==(0 -0)) then return Sign * 0 ;else local FlatIdent_2661B=0 + 0 ;while true do if (FlatIdent_2661B==(997 -(915 + 82))) then Exponent=2 -1 ;IsNormal=0 + 0 ;break;end end end elseif (Exponent==(2691 -(1143 -499))) then return ((Mantissa==(1187 -(1069 + 118 + 0))) and (Sign * ((2 -1)/0))) or (Sign * NaN) ;end return LDExp(Sign,Exponent-(2237 -1214) ) * (IsNormal + (Mantissa/((1 + 1)^52))) ;end local function gString(Len) local Str;if  not Len then Len=gBits32();if (Len==0) then return "";end end Str=Sub(ByteString,DIP,(DIP + Len) -1 );DIP=DIP + Len ;local FStr={};for Idx=1, #Str do FStr[Idx]=Char(Byte(Sub(Str,Idx,Idx)));end return Concat(FStr);end local gInt=gBits32;local function _R(...) return {...},Select("#",...);end local function Deserialize() local Instrs={};local Functions={};local Lines={};local Chunk={Instrs,Functions,nil,Lines};local ConstCount=gBits32();local Consts={};for Idx=1,ConstCount do local Type=gBits8();local Cons;if (Type==1) then Cons=gBits8()~=0 ;elseif (Type==2) then Cons=gFloat();elseif (Type==3) then Cons=gString();end Consts[Idx]=Cons;end Chunk[3]=gBits8();for Idx=1,gBits32() do local Descriptor=gBits8();if (gBit(Descriptor,1,1)==0) then local Type=gBit(Descriptor,2,3);local Mask=gBit(Descriptor,4,6);local Inst={gBits16(),gBits16(),nil,nil};if (Type==0) then Inst[3]=gBits16();Inst[4]=gBits16();elseif (Type==1) then Inst[3]=gBits32();elseif (Type==2) then Inst[3]=gBits32() -(2^16) ;elseif (Type==3) then local FlatIdent_43862=0;while true do if (0==FlatIdent_43862) then Inst[3]=gBits32() -(2^16) ;Inst[4]=gBits16();break;end end end if (gBit(Mask,1,1)==1) then Inst[2]=Consts[Inst[2]];end if (gBit(Mask,2,2)==1) then Inst[3]=Consts[Inst[3]];end if (gBit(Mask,3,3)==1) then Inst[4]=Consts[Inst[4]];end Instrs[Idx]=Inst;end end for Idx=1,gBits32() do Functions[Idx-1 ]=Deserialize();end return Chunk;end local function Wrap(Chunk,Upvalues,Env) local Instr=Chunk[1];local Proto=Chunk[2];local Params=Chunk[3];return function(...) local Instr=Instr;local Proto=Proto;local Params=Params;local _R=_R;local VIP=1;local Top= -1;local Vararg={};local Args={...};local PCount=Select("#",...) -1 ;local Lupvals={};local Stk={};for Idx=0,PCount do if (Idx>=Params) then Vararg[Idx-Params ]=Args[Idx + 1 ];else Stk[Idx]=Args[Idx + 1 ];end end local Varargsz=(PCount-Params) + 1 ;local Inst;local Enum;while true do local FlatIdent_8F047=0;while true do if (FlatIdent_8F047==0) then Inst=Instr[VIP];Enum=Inst[1];FlatIdent_8F047=1;end if (FlatIdent_8F047==1) then if (Enum<=19) then if (Enum<=9) then if (Enum<=4) then if (Enum<=1) then if (Enum==0) then Stk[Inst[2]]=Env[Inst[3]];else local A=Inst[2];Stk[A]=Stk[A](Unpack(Stk,A + 1 ,Inst[3]));end elseif (Enum<=2) then Stk[Inst[2]]=Inst[3] + Stk[Inst[4]] ;elseif (Enum==3) then local A;Stk[Inst[2]]=Inst[3];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Inst[3];VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];Stk[A]=Stk[A](Unpack(Stk,A + 1 ,Inst[3]));VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]][Inst[3]]=Stk[Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Stk[Inst[3]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Inst[3];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Inst[3];VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];Stk[A]=Stk[A](Unpack(Stk,A + 1 ,Inst[3]));VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]][Inst[3]]=Stk[Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Stk[Inst[3]];else local A=Inst[2];local Results,Limit=_R(Stk[A](Stk[A + 1 ]));Top=(Limit + A) -1 ;local Edx=0;for Idx=A,Top do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end end elseif (Enum<=6) then if (Enum==5) then local NewProto=Proto[Inst[3]];local NewUvals;local Indexes={};NewUvals=Setmetatable({},{__index=function(_,Key) local Val=Indexes[Key];return Val[1][Val[2]];end,__newindex=function(_,Key,Value) local FlatIdent_6FA1=0;local Val;while true do if (0==FlatIdent_6FA1) then Val=Indexes[Key];Val[1][Val[2]]=Value;break;end end end});for Idx=1,Inst[4] do local FlatIdent_61B23=0;local Mvm;while true do if (FlatIdent_61B23==0) then VIP=VIP + 1 ;Mvm=Instr[VIP];FlatIdent_61B23=1;end if (FlatIdent_61B23==1) then if (Mvm[1]==8) then Indexes[Idx-1 ]={Stk,Mvm[3]};else Indexes[Idx-1 ]={Upvalues,Mvm[3]};end Lupvals[ #Lupvals + 1 ]=Indexes;break;end end end Stk[Inst[2]]=Wrap(NewProto,NewUvals,Env);else local A=Inst[2];Stk[A](Unpack(Stk,A + 1 ,Top));end elseif (Enum<=7) then for Idx=Inst[2],Inst[3] do Stk[Idx]=nil;end elseif (Enum==8) then Stk[Inst[2]]=Stk[Inst[3]];else Stk[Inst[2]]=Upvalues[Inst[3]];end elseif (Enum<=14) then if (Enum<=11) then if (Enum==10) then local Step;local Index;local A;Stk[Inst[2]]={};VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Inst[3];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]= #Stk[Inst[3]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Inst[3];VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];Index=Stk[A];Step=Stk[A + 2 ];if (Step>0) then if (Index>Stk[A + 1 ]) then VIP=Inst[3];else Stk[A + 3 ]=Index;end elseif (Index<Stk[A + 1 ]) then VIP=Inst[3];else Stk[A + 3 ]=Index;end else Stk[Inst[2]]();end elseif (Enum<=12) then local FlatIdent_946F=0;local A;while true do if (FlatIdent_946F==4) then Inst=Instr[VIP];Stk[Inst[2]]=Inst[3];VIP=VIP + 1 ;Inst=Instr[VIP];FlatIdent_946F=5;end if (FlatIdent_946F==7) then VIP=VIP + 1 ;Inst=Instr[VIP];for Idx=Inst[2],Inst[3] do Stk[Idx]=nil;end break;end if (FlatIdent_946F==3) then VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Inst[3];VIP=VIP + 1 ;FlatIdent_946F=4;end if (FlatIdent_946F==5) then A=Inst[2];Stk[A]=Stk[A](Unpack(Stk,A + 1 ,Inst[3]));VIP=VIP + 1 ;Inst=Instr[VIP];FlatIdent_946F=6;end if (FlatIdent_946F==1) then A=Inst[2];Stk[A]=Stk[A](Unpack(Stk,A + 1 ,Inst[3]));VIP=VIP + 1 ;Inst=Instr[VIP];FlatIdent_946F=2;end if (0==FlatIdent_946F) then A=nil;Stk[Inst[2]]=Inst[3];VIP=VIP + 1 ;Inst=Instr[VIP];FlatIdent_946F=1;end if (FlatIdent_946F==2) then Stk[Inst[2]][Inst[3]]=Stk[Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Stk[Inst[3]];FlatIdent_946F=3;end if (FlatIdent_946F==6) then Stk[Inst[2]][Inst[3]]=Stk[Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Inst[3];FlatIdent_946F=7;end end elseif (Enum==13) then local FlatIdent_380E8=0;while true do if (FlatIdent_380E8==0) then Stk[Inst[2]]=Stk[Inst[3]][Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]][Stk[Inst[3]]]=Inst[4];FlatIdent_380E8=1;end if (FlatIdent_380E8==2) then Inst=Instr[VIP];Stk[Inst[2]]=Stk[Inst[3]][Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];FlatIdent_380E8=3;end if (FlatIdent_380E8==3) then Stk[Inst[2]][Stk[Inst[3]]]=Inst[4];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Inst[3];FlatIdent_380E8=4;end if (FlatIdent_380E8==1) then VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Env[Inst[3]];VIP=VIP + 1 ;FlatIdent_380E8=2;end if (4==FlatIdent_380E8) then VIP=VIP + 1 ;Inst=Instr[VIP];VIP=Inst[3];break;end end else local A=Inst[2];do return Unpack(Stk,A,Top);end end elseif (Enum<=16) then if (Enum>15) then if (Stk[Inst[2]]==Inst[4]) then VIP=VIP + 1 ;else VIP=Inst[3];end else Stk[Inst[2]]=Stk[Inst[3]][Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Stk[Inst[3]][Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]][Stk[Inst[3]]]=Stk[Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Env[Inst[3]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Stk[Inst[3]][Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Stk[Inst[3]][Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]][Stk[Inst[3]]]=Stk[Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Inst[3];VIP=VIP + 1 ;Inst=Instr[VIP];VIP=Inst[3];end elseif (Enum<=17) then Stk[Inst[2]]=Stk[Inst[3]] + Inst[4] ;elseif (Enum>18) then local FlatIdent_35A31=0;local A;while true do if (FlatIdent_35A31==0) then A=Inst[2];Stk[A]=Stk[A](Unpack(Stk,A + 1 ,Top));break;end end else Stk[Inst[2]]=Stk[Inst[3]][Inst[4]];end elseif (Enum<=29) then if (Enum<=24) then if (Enum<=21) then if (Enum>20) then local FlatIdent_189F0=0;local A;while true do if (FlatIdent_189F0==5) then Stk[Inst[2]][Inst[3]]=Stk[Inst[4]];break;end if (FlatIdent_189F0==2) then VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]][Inst[3]]=Stk[Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Stk[Inst[3]];FlatIdent_189F0=3;end if (3==FlatIdent_189F0) then VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Inst[3];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Inst[3];FlatIdent_189F0=4;end if (FlatIdent_189F0==0) then A=nil;Stk[Inst[2]]=Stk[Inst[3]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Inst[3];VIP=VIP + 1 ;FlatIdent_189F0=1;end if (FlatIdent_189F0==1) then Inst=Instr[VIP];Stk[Inst[2]]=Inst[3];VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];Stk[A]=Stk[A](Unpack(Stk,A + 1 ,Inst[3]));FlatIdent_189F0=2;end if (4==FlatIdent_189F0) then VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];Stk[A]=Stk[A](Unpack(Stk,A + 1 ,Inst[3]));VIP=VIP + 1 ;Inst=Instr[VIP];FlatIdent_189F0=5;end end else local Edx;local Results,Limit;local B;local A;Stk[Inst[2]]=Env[Inst[3]];VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];B=Stk[Inst[3]];Stk[A + 1 ]=B;Stk[A]=B[Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Inst[3];VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];Results,Limit=_R(Stk[A](Unpack(Stk,A + 1 ,Inst[3])));Top=(Limit + A) -1 ;Edx=0;for Idx=A,Top do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];Stk[A]=Stk[A](Unpack(Stk,A + 1 ,Top));VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]();VIP=VIP + 1 ;Inst=Instr[VIP];VIP=Inst[3];end elseif (Enum<=22) then Stk[Inst[2]]=Stk[Inst[3]]%Inst[4] ;elseif (Enum>23) then Stk[Inst[2]]=Stk[Inst[3]]%Stk[Inst[4]] ;else local A=Inst[2];local Index=Stk[A];local Step=Stk[A + 2 ];if (Step>0) then if (Index>Stk[A + 1 ]) then VIP=Inst[3];else Stk[A + 3 ]=Index;end elseif (Index<Stk[A + 1 ]) then VIP=Inst[3];else Stk[A + 3 ]=Index;end end elseif (Enum<=26) then if (Enum==25) then if  not Stk[Inst[2]] then VIP=VIP + 1 ;else VIP=Inst[3];end else do return;end end elseif (Enum<=27) then local FlatIdent_8A742=0;local A;local Results;local Limit;local Edx;while true do if (FlatIdent_8A742==1) then Top=(Limit + A) -1 ;Edx=0;FlatIdent_8A742=2;end if (0==FlatIdent_8A742) then A=Inst[2];Results,Limit=_R(Stk[A](Unpack(Stk,A + 1 ,Inst[3])));FlatIdent_8A742=1;end if (FlatIdent_8A742==2) then for Idx=A,Top do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end break;end end elseif (Enum==28) then local A=Inst[2];local B=Stk[Inst[3]];Stk[A + 1 ]=B;Stk[A]=B[Inst[4]];else Stk[Inst[2]]= #Stk[Inst[3]];end elseif (Enum<=34) then if (Enum<=31) then if (Enum>30) then Stk[Inst[2]][Inst[3]]=Stk[Inst[4]];else Stk[Inst[2]]=Inst[3];end elseif (Enum<=32) then Stk[Inst[2]][Stk[Inst[3]]]=Stk[Inst[4]];elseif (Enum==33) then local Edx;local Results,Limit;local A;Stk[Inst[2]]=Stk[Inst[3]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Upvalues[Inst[3]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Upvalues[Inst[3]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Upvalues[Inst[3]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Upvalues[Inst[3]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Stk[Inst[3]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Stk[Inst[3]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Stk[Inst[3]] + Inst[4] ;VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];Results,Limit=_R(Stk[A](Unpack(Stk,A + 1 ,Inst[3])));Top=(Limit + A) -1 ;Edx=0;for Idx=A,Top do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];Stk[A]=Stk[A](Unpack(Stk,A + 1 ,Top));VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Upvalues[Inst[3]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Upvalues[Inst[3]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Stk[Inst[3]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]= #Stk[Inst[3]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Stk[Inst[3]]%Stk[Inst[4]] ;VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Inst[3] + Stk[Inst[4]] ;VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]= #Stk[Inst[3]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Stk[Inst[3]]%Stk[Inst[4]] ;VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Inst[3] + Stk[Inst[4]] ;VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Stk[Inst[3]] + Inst[4] ;VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];Results,Limit=_R(Stk[A](Unpack(Stk,A + 1 ,Inst[3])));Top=(Limit + A) -1 ;Edx=0;for Idx=A,Top do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];Results,Limit=_R(Stk[A](Unpack(Stk,A + 1 ,Top)));Top=(Limit + A) -1 ;Edx=0;for Idx=A,Top do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];Stk[A]=Stk[A](Unpack(Stk,A + 1 ,Top));VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Stk[Inst[3]]%Inst[4] ;VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];Results,Limit=_R(Stk[A](Stk[A + 1 ]));Top=(Limit + A) -1 ;Edx=0;for Idx=A,Top do local FlatIdent_7F121=0;while true do if (FlatIdent_7F121==0) then Edx=Edx + 1 ;Stk[Idx]=Results[Edx];break;end end end VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];Stk[A](Unpack(Stk,A + 1 ,Top));else local A=Inst[2];local Step=Stk[A + 2 ];local Index=Stk[A] + Step ;Stk[A]=Index;if (Step>0) then if (Index<=Stk[A + 1 ]) then VIP=Inst[3];Stk[A + 3 ]=Index;end elseif (Index>=Stk[A + 1 ]) then local FlatIdent_206F8=0;while true do if (0==FlatIdent_206F8) then VIP=Inst[3];Stk[A + 3 ]=Index;break;end end end end elseif (Enum<=37) then if (Enum<=35) then local A=Inst[2];do return Stk[A](Unpack(Stk,A + 1 ,Inst[3]));end elseif (Enum>36) then Stk[Inst[2]]={};else local A=Inst[2];local Results,Limit=_R(Stk[A](Unpack(Stk,A + 1 ,Top)));Top=(Limit + A) -1 ;local Edx=0;for Idx=A,Top do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end end elseif (Enum<=38) then local FlatIdent_3CF36=0;while true do if (FlatIdent_3CF36==1) then Stk[Inst[2]]=Env[Inst[3]];VIP=VIP + 1 ;Inst=Instr[VIP];FlatIdent_3CF36=2;end if (2==FlatIdent_3CF36) then Stk[Inst[2]]=Stk[Inst[3]][Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];FlatIdent_3CF36=3;end if (FlatIdent_3CF36==7) then Stk[Inst[2]]=Env[Inst[3]];VIP=VIP + 1 ;Inst=Instr[VIP];FlatIdent_3CF36=8;end if (FlatIdent_3CF36==0) then Stk[Inst[2]]={};VIP=VIP + 1 ;Inst=Instr[VIP];FlatIdent_3CF36=1;end if (FlatIdent_3CF36==6) then Stk[Inst[2]]=Stk[Inst[3]][Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];FlatIdent_3CF36=7;end if (FlatIdent_3CF36==8) then if  not Stk[Inst[2]] then VIP=VIP + 1 ;else VIP=Inst[3];end break;end if (FlatIdent_3CF36==5) then Stk[Inst[2]]=Env[Inst[3]];VIP=VIP + 1 ;Inst=Instr[VIP];FlatIdent_3CF36=6;end if (FlatIdent_3CF36==4) then Stk[Inst[2]]=Stk[Inst[3]][Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];FlatIdent_3CF36=5;end if (3==FlatIdent_3CF36) then Stk[Inst[2]]=Env[Inst[3]];VIP=VIP + 1 ;Inst=Instr[VIP];FlatIdent_3CF36=4;end end elseif (Enum==39) then VIP=Inst[3];else Stk[Inst[2]][Stk[Inst[3]]]=Inst[4];end VIP=VIP + 1 ;break;end end end end;end return Wrap(Deserialize(),{},vmenv)(...);end return VMCall
